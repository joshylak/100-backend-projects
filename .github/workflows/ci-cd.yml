name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
    steps:
      - uses: actions/checkout@v4
      - name: Detect changed services
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            CHANGED_DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^[^/]+/' | cut -d'/' -f1 | sort -u | grep -v -E '^(\.|k8s|\.github)' || true)
          else
            CHANGED_DIRS=$(git diff --name-only origin/main...HEAD | grep -E '^[^/]+/' | cut -d'/' -f1 | sort -u | grep -v -E '^(\.|k8s|\.github)' || true)
          fi
          
          if [ -z "$CHANGED_DIRS" ]; then
            echo "services=[]" >> $GITHUB_OUTPUT
          else
            SERVICES=$(echo "$CHANGED_DIRS" | jq -R -s -c 'split("\n")[:-1]')
            echo "services=$SERVICES" >> $GITHUB_OUTPUT
          fi

  test:
    needs: detect-changes
    if: needs.detect-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.service }}/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          npm ci
      
      - name: Run tests
        run: |
          cd ${{ matrix.service }}
          npm test || echo "No tests found"
      
      - name: Run linting
        run: |
          cd ${{ matrix.service }}
          npx eslint . --ext .js,.mjs || echo "No ESLint config found"

  build:
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: [detect-changes, build]
    if: github.ref == 'refs/heads/develop' && needs.detect-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    environment: staging
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          cd k8s
          sed "s/{{SERVICE_NAME}}/${{ matrix.service }}/g; s/{{CATEGORY}}/staging/g" deployment-template.yaml > staging-${{ matrix.service }}.yaml
          kubectl apply -f staging-${{ matrix.service }}.yaml -n backend-projects-staging
          kubectl rollout status deployment/${{ matrix.service }} -n backend-projects-staging

  deploy-production:
    needs: [detect-changes, build]
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          cd k8s
          sed "s/{{SERVICE_NAME}}/${{ matrix.service }}/g; s/{{CATEGORY}}/production/g" deployment-template.yaml > prod-${{ matrix.service }}.yaml
          kubectl apply -f prod-${{ matrix.service }}.yaml -n backend-projects
          kubectl rollout status deployment/${{ matrix.service }} -n backend-projects
      
      - name: Run smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          kubectl wait --for=condition=ready pod -l app=${{ matrix.service }} -n backend-projects --timeout=300s
          SERVICE_URL=$(kubectl get svc ${{ matrix.service }}-service -n backend-projects -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f http://$SERVICE_URL/health || exit 1